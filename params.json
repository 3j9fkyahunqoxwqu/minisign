{"name":"Minisign","tagline":"A dead simple tool to sign files and verify signatures.","body":"\r\nMinisign\r\n========\r\n\r\nMinisign is a dead simple tool to sign files and verify signatures.\r\n\r\nCompilation / installation\r\n--------------------------\r\n\r\nDependencies:\r\n* [libsodium](http://doc.libsodium.org/)\r\n* cmake\r\n\r\nCompilation:\r\n\r\n    $ mkdir build\r\n    $ cd build\r\n    $ cmake ..\r\n    $ make\r\n    # make install\r\n\r\nCreating a key pair\r\n-------------------\r\n\r\n    $ minisign -G\r\n\r\nThe public key is printed and put into the `minisign.pub` file. The secret key\r\nis encrypted and saved as `minisign.key` file.\r\n\r\nSigning a file\r\n--------------\r\n\r\n    $ minisign -Sm myfile.txt\r\n\r\nOr to include a comment in the signature, that will be verified and\r\ndisplayed when verifying the file:\r\n\r\n    $ minisign -Sm myfile.txt -t 'This comment will be signed as well'\r\n\r\nThe signature is put into `myfile.txt.minisig`.\r\n\r\nVerifying a file\r\n----------------\r\n\r\n    $ minisign -Vm myfile.txt -P RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3\r\n\r\nor\r\n\r\n    $ minisign -Vm myfile.txt -p signature.pub\r\n\r\nThis requires the signature `myfile.txt.minisig` to be present in the same\r\ndirectory.\r\n\r\nThe public key can either reside in a file (`./minisign.pub` by default) or be\r\ndirectly specified on the command line.\r\n\r\nUsage\r\n-----\r\n\r\n    $ minisign -G [-p pubkey] [-s seckey]\r\n    $ minisign -S [-x sigfile] [-s seckey] [-c untrusted_comment] [-t trusted_comment] -m file\r\n    $ minisign -V [-x sigfile] [-p pubkeyfile | -P pubkey] [-q] -m file\r\n\r\n    -G                generate a new key pair\r\n    -S                sign a file\r\n    -V                verify that a signature is valid for a given file\r\n    -m <file>         file to sign/verify\r\n    -p <pubkeyfile>   public key file (default: ./minisign.pub)\r\n    -P <pubkey>       public key, as a base64 string\r\n    -s <seckey>       secret key file (default: ./minisign.key)\r\n    -x <sigfile>      signature file (default: <file>.minisig)\r\n    -c <comment>      add a one-line untrusted comment\r\n    -t <comment>      add a one-line trusted comment\r\n    -q                quiet mode, suppress output\r\n    -v                display version number\r\n\r\nTrusted comments\r\n----------------\r\n\r\nSignature files include an untrusted comment line that can be freely\r\nmodified, even after signature creation.\r\n\r\nThey also include a second comment line, that cannot be modified\r\nwithout the secret key.\r\n\r\nTrusted comments can be used to add instructions or application-specific\r\nmetadata (intended file name, timestamps, resource identifiers,\r\nversion numbers to prevent downgrade attacks).\r\n\r\nCompatibility with OpenBSD signify\r\n----------------------------------\r\n\r\nSignature written by minisign can be verified using OpenBSD's signify\r\ntool: public key files and signature files are compatible.\r\n\r\nHowever, minisign uses a slightly different format to store secret keys.\r\n\r\nMinisign signatures include trusted comments in addition to untrusted\r\ncomments. Trusted comments are signed, thus verified, before being\r\ndisplayed.\r\n\r\nThis adds two lines to the signature files, that signify silently ignores.\r\n\r\nSignature format\r\n----------------\r\n\r\n    untrusted comment: <arbitrary text>\r\n    base64(<signature_algorithm> || <key_id> || <signature>)\r\n    trusted_comment: <arbitrary text>\r\n    base64(<global_signature>)\r\n\r\n* `signature_algorithm`: `Ed`\r\n* `key_id`: 8 random bytes, matching the public key\r\n* `signature`: `ed25519(<file data>)`\r\n* `global_signature`: `ed25519(<signature> || <trusted_comment>)`\r\n\r\nPublic key format\r\n-----------------\r\n\r\n    untrusted comment: <arbitrary text>\r\n    base64(<signature_algorithm> || <key_id> || <public_key>)\r\n\r\n* `signature_algorithm`: `Ed`\r\n* `key_id`: 8 random bytes\r\n* `public_key`: Ed25519 public key\r\n\r\nSecret key format\r\n-----------------\r\n\r\n    untrusted comment: <arbitrary text>\r\n    base64(<signature_algorithm> || <kdf_algorithm> || <cksum_algorithm> ||\r\n           <kdf_salt> || <kdf_opslimit> || <kdf_memlimit> || <keynum_sk>)\r\n\r\n* `signature_algorithm`: `Ed`\r\n* `kdf_algorithm`: `Sc`\r\n* `cksum_algorithm`: `B2`\r\n* `kdf_salt`: 32 random bytes\r\n* `kdf_opslimit`: `crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE`\r\n* `kdf_memlimit`: `crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE`\r\n* `keynum_sk`: `<kdf_output> ^ (<key_id> || secret_key> || <checksum>)`\r\n* `key_id`: 8 random bytes\r\n* `secret_key`: Ed25519 secret key\r\n* `checksum`: `Blake2b(<signature_algorithm> || <key_id> || <secret_key>)`, 32 bytes\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}